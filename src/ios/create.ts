import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import { setupCocoaPods } from "./getPod.js";
import { randomBytes } from "crypto";

const create = () => {
	// --- Helper to generate Xcode-style 24-char IDs ---
	const generateId = () => randomBytes(12).toString('hex').toUpperCase();

	// --- Configuration Loading ---
	let appName: string;
	let bundleId: string;

	try {
		const configPath = path.join(process.cwd(), "tamer.config.json");
		if (!fs.existsSync(configPath)) {
			throw new Error("tamer.config.json not found in the project root.");
		}
		const configRaw = fs.readFileSync(configPath, "utf8");
		const config = JSON.parse(configRaw);
		appName = config.ios?.appName;
		bundleId = config.ios?.bundleId;

		if (!appName && !bundleId) {
			throw new Error('"ios.appName" and "ios.bundleId" must be defined in tamer.config.json');
		}
	} catch (error: any) {
		console.error(`❌ Error loading configuration: ${error.message}`);
		process.exit(1);
	}

	// --- Project Setup ---
	const rootDir = path.join(process.cwd(), "ios");
	const projectDir = path.join(rootDir, appName);
	const xcodeprojDir = path.join(rootDir, `${appName}.xcodeproj`);
	const bridgingHeader = `${appName}-Bridging-Header.h`;

	function writeFile(filePath: string, content: string): void {
		fs.mkdirSync(path.dirname(filePath), { recursive: true });
		fs.writeFileSync(filePath, content.trimStart(), "utf8");
	}

	// Clean up previous generation if it exists
	if (fs.existsSync(rootDir)) {
		console.log(`🧹 Removing existing directory: ${rootDir}`);
		fs.rmSync(rootDir, { recursive: true, force: true });
	}

	console.log(`🚀 Creating a new Tamer4Lynx project in: ${rootDir}`);

	// --- Generate Xcode Object IDs ---
	const ids = {
		project: generateId(),
		mainGroup: generateId(),
		appGroup: generateId(),
		productsGroup: generateId(),
		frameworksGroup: generateId(),
		appFile: generateId(),
		appDelegateRef: generateId(),
		sceneDelegateRef: generateId(),
		viewControllerRef: generateId(),
		mainStoryboardRef: generateId(),
		assetsRef: generateId(),
		launchStoryboardRef: generateId(),
		lynxProviderRef: generateId(),
		generatedExtensionsRef: generateId(),
		bridgingHeaderRef: generateId(),
		mainStoryboardBaseRef: generateId(),
		launchStoryboardBaseRef: generateId(),
		nativeTarget: generateId(),
		appDelegateBuildFile: generateId(),
		sceneDelegateBuildFile: generateId(),
		viewControllerBuildFile: generateId(),
		lynxProviderBuildFile: generateId(),
		generatedExtensionsBuildFile: generateId(),
		mainStoryboardBuildFile: generateId(),
		assetsBuildFile: generateId(),
		launchStoryboardBuildFile: generateId(),
		frameworksBuildPhase: generateId(),
		resourcesBuildPhase: generateId(),
		sourcesBuildPhase: generateId(),
		projectBuildConfigList: generateId(),
		targetBuildConfigList: generateId(),
		projectDebugConfig: generateId(),
		projectReleaseConfig: generateId(),
		targetDebugConfig: generateId(),
		targetReleaseConfig: generateId(),
	};

	// --- Start File Generation ---

	// Podfile
	writeFile(path.join(rootDir, "Podfile"), `
source 'https://cdn.cocoapods.org/'

platform :ios, '12.0'

target '${appName}' do
  pod 'Lynx', '3.3.0', :subspecs => [
	'Framework',
  ]

  pod 'PrimJS', '2.13.2', :subspecs => ['quickjs', 'napi']

  # integrate image-service, log-service, and http-service
  pod 'LynxService', '3.3.0', :subspecs => [
	  'Image',
	  'Log',
	  'Http',
  ]
  pod 'SDWebImage','5.15.5'
  pod 'SDWebImageWebPCoder', '0.11.0'

  # GENERATED AUTOLINK DEPENDENCIES START
  # This section is automatically generated by Tamer4Lynx.
  # Manual edits will be overwritten.
  # GENERATED AUTOLINK DEPENDENCIES END
end

post_install do |installer|
  installer.pods_project.targets.each do |target|
	if target.name == 'Lynx'
	  target.build_configurations.each do |config|
		flags = [
		  '-Wno-vla-extension',
		  '-Wno-vla',
		  '-Wno-error=vla-extension',
		  '-Wno-deprecated-declarations',
		  '-Wno-deprecated',
		  '-Wno-macro-redefined',
		  '-Wno-enum-compare',
		  '-Wno-enum-compare-conditional',
		  '-Wno-enum-conversion'
		].join(' ')
		
		config.build_settings['OTHER_CPLUSPLUSFLAGS'] = "$(inherited) #{flags}"
		config.build_settings['OTHER_CFLAGS'] = "$(inherited) #{flags}"
		config.build_settings['CLANG_WARN_VLA'] = 'NO'
		config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
		config.build_settings['CLANG_WARN_ENUM_CONVERSION'] = 'NO'
	  end
	end
  end
end
	`);

	// --- App Files (same as before) ---
	writeFile(path.join(projectDir, "AppDelegate.swift"), `
import UIKit

@UIApplicationMain
class AppDelegate: UIResponder, UIApplicationDelegate {
  var window: UIWindow?
  func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {
	GeneratedLynxExtensions.register()
	return true
  }
}
	`);
	writeFile(path.join(projectDir, "GeneratedLynxExtensions.swift"), `
import Foundation
import Lynx

@objc(GeneratedLynxExtensions)
class GeneratedLynxExtensions: NSObject {
    @objc static func register() {
        // This file is generated by the Tamer4Lynx autolinker.
        // Do not edit this file manually.

        // GENREATED AUTOLINK REGISTER START
        // GENREATED AUTOLINK REGISTER END
    }
}
	`);
	writeFile(path.join(projectDir, "ViewController.swift"), `
import UIKit

class ViewController: UIViewController {

  override func viewDidLoad() {
	super.viewDidLoad()

	let lynxView = LynxView { builder in
	  builder.config = LynxConfig(provider: LynxProvider())
	  builder.screenSize = self.view.frame.size
	  builder.fontScale = 1.0
	}

	lynxView.preferredLayoutWidth = self.view.frame.size.width
	lynxView.preferredLayoutHeight = self.view.frame.size.height
	lynxView.layoutWidthMode = .exact
	lynxView.layoutHeightMode = .exact
	self.view.addSubview(lynxView)

	lynxView.loadTemplate(fromURL: "main.lynx", initData: nil)
  }
}
	`);
	writeFile(path.join(projectDir, "LynxProvider.swift"), `
import Foundation

class LynxProvider: NSObject, LynxTemplateProvider {
  func loadTemplate(withUrl url: String!, onComplete callback: LynxTemplateLoadBlock!) {
	if let filePath = Bundle.main.path(forResource: url, ofType: "bundle") {
	  do {
		let data = try Data(contentsOf: URL(fileURLWithPath: filePath))
		callback(data, nil)
	  } catch {
		print("Error reading file: \\(error.localizedDescription)")
		callback(nil, error)
	  }
	} else {
	  let urlError = NSError(domain: "com.lynx", code: 400, userInfo: [NSLocalizedDescriptionKey: "Invalid URL."])
	  callback(nil, urlError)
	}
  }
}
	`);
	writeFile(path.join(projectDir, bridgingHeader), `
#import <Lynx/LynxConfig.h>
#import <Lynx/LynxEnv.h>
#import <Lynx/LynxTemplateProvider.h>
#import <Lynx/LynxView.h>
#import <Lynx/LynxModule.h>
	`);
	 // Create a minimal asset catalog
	fs.mkdirSync(path.join(projectDir, "Assets.xcassets", "AppIcon.appiconset"), { recursive: true });
	writeFile(path.join(projectDir, "Assets.xcassets", "AppIcon.appiconset", "Contents.json"), `
{
  "images" : [ { "idiom" : "universal", "platform" : "ios", "size" : "1024x1024" } ],
  "info" : { "author" : "xcode", "version" : 1 }
}
	`);
	
	// --- Xcode Project File (VALID TEMPLATE) ---
	fs.mkdirSync(xcodeprojDir, { recursive: true });
	writeFile(path.join(xcodeprojDir, "project.pbxproj"), `
// !$*UTF8*$!
{
	archiveVersion = 1;
	classes = {};
	objectVersion = 56;
	objects = {
/* Begin PBXBuildFile section */
		${ids.appDelegateBuildFile} /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = ${ids.appDelegateRef} /* AppDelegate.swift */; };
		${ids.viewControllerBuildFile} /* ViewController.swift in Sources */ = {isa = PBXBuildFile; fileRef = ${ids.viewControllerRef} /* ViewController.swift */; };
		${ids.mainStoryboardBuildFile} /* Base in Resources */ = {isa = PBXBuildFile; fileRef = ${ids.mainStoryboardBaseRef} /* Base */; };
		${ids.assetsBuildFile} /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = ${ids.assetsRef} /* Assets.xcassets */; };
		${ids.lynxProviderBuildFile} /* LynxProvider.swift in Sources */ = {isa = PBXBuildFile; fileRef = ${ids.lynxProviderRef} /* LynxProvider.swift */; };
		${ids.generatedExtensionsBuildFile} /* GeneratedLynxExtensions.swift in Sources */ = {isa = PBXBuildFile; fileRef = ${ids.generatedExtensionsRef} /* GeneratedLynxExtensions.swift */; };
/* End PBXBuildFile section */

/* Begin PBXFileReference section */
		${ids.appFile} /* ${appName}.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = "${appName}.app"; sourceTree = BUILT_PRODUCTS_DIR; };
		${ids.appDelegateRef} /* AppDelegate.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "AppDelegate.swift"; sourceTree = "<group>"; };
		${ids.viewControllerRef} /* ViewController.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "ViewController.swift"; sourceTree = "<group>"; };
		${ids.mainStoryboardBaseRef} /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = "Base.lproj/Main.storyboard"; sourceTree = "<group>"; };
		${ids.assetsRef} /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = "Assets.xcassets"; sourceTree = "<group>"; };
		${ids.lynxProviderRef} /* LynxProvider.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "LynxProvider.swift"; sourceTree = "<group>"; };
		${ids.generatedExtensionsRef} /* GeneratedLynxExtensions.swift */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.swift; path = "GeneratedLynxExtensions.swift"; sourceTree = "<group>"; };
		${ids.bridgingHeaderRef} /* ${bridgingHeader} */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "${bridgingHeader}"; sourceTree = "<group>"; };
/* End PBXFileReference section */

/* Begin PBXFrameworksBuildPhase section */
		${ids.frameworksBuildPhase} /* Frameworks */ = {
			isa = PBXFrameworksBuildPhase;
			buildActionMask = 2147483647;
			files = (
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXFrameworksBuildPhase section */

/* Begin PBXGroup section */
		${ids.mainGroup} = {
			isa = PBXGroup;
			children = (
				${ids.appGroup} /* ${appName} */,
				${ids.productsGroup} /* Products */,
				${ids.frameworksGroup} /* Frameworks */,
			);
			sourceTree = "<group>";
		};
		${ids.productsGroup} /* Products */ = {
			isa = PBXGroup;
			children = (
				${ids.appFile} /* ${appName}.app */,
			);
			name = Products;
			sourceTree = "<group>";
		};
		${ids.frameworksGroup} /* Frameworks */ = {
			isa = PBXGroup;
			children = (
			);
			name = Frameworks;
			sourceTree = "<group>";
		};
		${ids.appGroup} /* ${appName} */ = {
			isa = PBXGroup;
			children = (
				${ids.appDelegateRef} /* AppDelegate.swift */,
				${ids.viewControllerRef} /* ViewController.swift */,
				${ids.mainStoryboardRef} /* Main.storyboard */,
				${ids.assetsRef} /* Assets.xcassets */,
				${ids.lynxProviderRef} /* LynxProvider.swift */,
				${ids.generatedExtensionsRef} /* GeneratedLynxExtensions.swift */,
				${ids.bridgingHeaderRef} /* ${bridgingHeader} */,
			);
			path = "${appName}";
			sourceTree = "<group>";
		};
/* End PBXGroup section */

/* Begin PBXNativeTarget section */
		${ids.nativeTarget} /* ${appName} */ = {
			isa = PBXNativeTarget;
			buildConfigurationList = ${ids.targetBuildConfigList} /* Build configuration list for PBXNativeTarget "${appName}" */;
			buildPhases = (
				${ids.sourcesBuildPhase} /* Sources */,
				${ids.frameworksBuildPhase} /* Frameworks */,
				${ids.resourcesBuildPhase} /* Resources */,
			);
			buildRules = (
			);
			dependencies = (
			);
			name = "${appName}";
			productName = "${appName}";
			productReference = ${ids.appFile} /* ${appName}.app */;
			productType = "com.apple.product-type.application";
		};
/* End PBXNativeTarget section */

/* Begin PBXProject section */
		${ids.project} /* Project object */ = {
			isa = PBXProject;
			attributes = {
				LastUpgradeCheck = 1530;
			};
			buildConfigurationList = ${ids.projectBuildConfigList} /* Build configuration list for PBXProject "${appName}" */;
			compatibilityVersion = "Xcode 14.0";
			developmentRegion = en;
			hasScannedForEncodings = 0;
			knownRegions = (
				en,
				Base,
			);
			mainGroup = ${ids.mainGroup};
			productRefGroup = ${ids.productsGroup} /* Products */;
			projectDirPath = "";
			projectRoot = "";
			targets = (
				${ids.nativeTarget} /* ${appName} */,
			);
		};
/* End PBXProject section */

/* Begin PBXResourcesBuildPhase section */
		${ids.resourcesBuildPhase} /* Resources */ = {
			isa = PBXResourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				${ids.assetsBuildFile} /* Assets.xcassets in Resources */,
				${ids.mainStoryboardBuildFile} /* Base in Resources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXResourcesBuildPhase section */

/* Begin PBXSourcesBuildPhase section */
		${ids.sourcesBuildPhase} /* Sources */ = {
			isa = PBXSourcesBuildPhase;
			buildActionMask = 2147483647;
			files = (
				${ids.generatedExtensionsBuildFile} /* GeneratedLynxExtensions.swift in Sources */,
				${ids.lynxProviderBuildFile} /* LynxProvider.swift in Sources */,
				${ids.viewControllerBuildFile} /* ViewController.swift in Sources */,
				${ids.appDelegateBuildFile} /* AppDelegate.swift in Sources */,
			);
			runOnlyForDeploymentPostprocessing = 0;
		};
/* End PBXSourcesBuildPhase section */

/* Begin PBXVariantGroup section */
		${ids.mainStoryboardRef} /* Main.storyboard */ = {
			isa = PBXVariantGroup;
			children = (
				${ids.mainStoryboardBaseRef} /* Base */,
			);
			name = "Main.storyboard";
			sourceTree = "<group>";
		};
/* End PBXVariantGroup section */

/* Begin XCBuildConfiguration section */
		${ids.projectDebugConfig} /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = dwarf;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = INCLUDE_SOURCE;
				SDKROOT = iphoneos;
				SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG;
				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
			};
			name = Debug;
		};
		${ids.projectReleaseConfig} /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ALWAYS_SEARCH_USER_PATHS = NO;
				CLANG_ANALYZER_NONNULL = YES;
				CLANG_CXX_LANGUAGE_STANDARD = "gnu++14";
				CLANG_CXX_LIBRARY = "libc++";
				CLANG_ENABLE_MODULES = YES;
				CLANG_ENABLE_OBJC_ARC = YES;
				CLANG_WARN_CONSTANT_CONVERSION = YES;
				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
				CLANG_WARN_EMPTY_BODY = YES;
				CLANG_WARN_INT_CONVERSION = YES;
				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
				CLANG_WARN_UNREACHABLE_CODE = YES;
				COPY_PHASE_STRIP = NO;
				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
				ENABLE_NS_ASSERTIONS = NO;
				ENABLE_STRICT_OBJC_MSGSEND = YES;
				GCC_C_LANGUAGE_STANDARD = gnu11;
				GCC_NO_COMMON_BLOCKS = YES;
				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
				GCC_WARN_UNUSED_VARIABLE = YES;
				IPHONEOS_DEPLOYMENT_TARGET = 12.0;
				MTL_ENABLE_DEBUG_INFO = NO;
				SDKROOT = iphoneos;
				SWIFT_COMPILATION_MODE = wholemodule;
				SWIFT_OPTIMIZATION_LEVEL = "-O";
			};
			name = Release;
		};
		${ids.targetDebugConfig} /* Debug */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_UIMainStoryboardFile = Main;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
				MARKETING_VERSION = "1.0";
				PRODUCT_BUNDLE_IDENTIFIER = "${bundleId}";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "${appName}/${bridgingHeader}";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Debug;
		};
		${ids.targetReleaseConfig} /* Release */ = {
			isa = XCBuildConfiguration;
			buildSettings = {
				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
				CURRENT_PROJECT_VERSION = 1;
				GENERATE_INFOPLIST_FILE = YES;
				INFOPLIST_KEY_UIMainStoryboardFile = Main;
				LD_RUNPATH_SEARCH_PATHS = "$(inherited) @executable_path/Frameworks";
				MARKETING_VERSION = "1.0";
				PRODUCT_BUNDLE_IDENTIFIER = "${bundleId}";
				PRODUCT_NAME = "$(TARGET_NAME)";
				SWIFT_OBJC_BRIDGING_HEADER = "${appName}/${bridgingHeader}";
				SWIFT_VERSION = 5.0;
				TARGETED_DEVICE_FAMILY = "1,2";
			};
			name = Release;
		};
/* End XCBuildConfiguration section */

/* Begin XCConfigurationList section */
		${ids.projectBuildConfigList} /* Build configuration list for PBXProject "${appName}" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				${ids.projectDebugConfig} /* Debug */,
				${ids.projectReleaseConfig} /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
		${ids.targetBuildConfigList} /* Build configuration list for PBXNativeTarget "${appName}" */ = {
			isa = XCConfigurationList;
			buildConfigurations = (
				${ids.targetDebugConfig} /* Debug */,
				${ids.targetReleaseConfig} /* Release */,
			);
			defaultConfigurationIsVisible = 0;
			defaultConfigurationName = Release;
		};
/* End XCConfigurationList section */
	};
	rootObject = ${ids.project} /* Project object */;
}
	`);

	// Minimal Main.storyboard
	fs.mkdirSync(path.join(projectDir, "Base.lproj"), { recursive: true });
	writeFile(path.join(projectDir, "Base.lproj", "Main.storyboard"), `
<?xml version="1.0" encoding="UTF-8"?>
<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="13122.16" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" useSafeAreas="YES" colorMatched="YES" initialViewController="BYZ-38-t0r">
	<dependencies>
		<plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="13104.12"/>
		<capability name="Safe area layout guides" minToolsVersion="9.0"/>
	</dependencies>
	<scenes>
		<scene sceneID="tne-QT-ifu">
			<objects>
				<viewController id="BYZ-38-t0r" customClass="ViewController" customModuleProvider="target" sceneMemberID="viewController">
					<view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
						<rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
						<autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
						<color key="backgroundColor" systemColor="systemBackgroundColor"/>
						<viewLayoutGuide key="safeArea" id="6Tk-OE-BBY"/>
					</view>
				</viewController>
				<placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
			</objects>
		</scene>
	</scenes>
</document>
	`);


	console.log(`✅ iOS Swift project created at ${rootDir}`);

	async function finalizeProjectSetup() {
		await setupCocoaPods(rootDir);
	}

	finalizeProjectSetup();
};

export default create;